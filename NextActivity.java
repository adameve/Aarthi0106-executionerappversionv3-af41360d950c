package anulom.executioner.com3.anulom;import android.Manifest;import android.app.ProgressDialog;import android.app.SearchManager;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.database.sqlite.SQLiteDatabase;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.preference.PreferenceManager;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.SearchView;import androidx.appcompat.widget.Toolbar;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.core.view.MenuItemCompat;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentManager;import androidx.fragment.app.FragmentPagerAdapter;import androidx.viewpager.widget.ViewPager;import com.google.android.material.tabs.TabLayout;import java.io.File;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Timer;import anulom.executioner.com3.anulom.Receiver.NetworkChangeReceiver;import anulom.executioner.com3.anulom.database.DBManager;import anulom.executioner.com3.anulom.database.DBOperation;import anulom.executioner.com3.anulom.fragment.biometricfragment;import anulom.executioner.com3.anulom.fragment.marriagefragment;import anulom.executioner.com3.anulom.fragment.pendingfragment;import anulom.executioner.com3.anulom.fragment.taskfragment;import anulom.executioner.com3.anulom.services.AppointmentstatusPost;import anulom.executioner.com3.anulom.services.Biometricdatalist;import anulom.executioner.com3.anulom.services.GetCommentService;import anulom.executioner.com3.anulom.services.InternalExternalWitness;import anulom.executioner.com3.anulom.services.Marriageacvrservice;import anulom.executioner.com3.anulom.services.Marriagecommentservice;import anulom.executioner.com3.anulom.services.Marriagedatalist;import anulom.executioner.com3.anulom.services.Posttask;import anulom.executioner.com3.anulom.services.SendCommentService;import anulom.executioner.com3.anulom.services.SendPaymentService;import anulom.executioner.com3.anulom.services.SendReportService;import anulom.executioner.com3.anulom.services.SendmultiPartyReport;import anulom.executioner.com3.anulom.services.StatusReportService;import anulom.executioner.com3.anulom.services.Taskdatalist;import anulom.executioner.com3.anulom.services.call;import anulom.executioner.com3.anulom.services.fetchactualtime;import anulom.executioner.com3.anulom.services.pendingwitnesslist;import anulom.executioner.com3.anulom.services.postappointmentbooking;import anulom.executioner.com3.anulom.services.reassignpost;import anulom.executioner.com3.anulom.services.rescheduledetails;import static anulom.executioner.com3.anulom.Login.umailid;import static anulom.executioner.com3.anulom.database.DBManager.TableInfo.ATTENDEES;import static anulom.executioner.com3.anulom.database.DBManager.TableInfo.ATT_STATUS;import static anulom.executioner.com3.anulom.database.DBManager.TableInfo.PAYMENT;import static anulom.executioner.com3.anulom.database.DBManager.TableInfo.TABLE_MARRIAGE;import static anulom.executioner.com3.anulom.database.DBManager.TableInfo.TABLE_MARRIAGE_APPOINTMENT;import static anulom.executioner.com3.anulom.database.DBManager.TableInfo.TABLE_MARRIAGE_ATTENDEES;import static anulom.executioner.com3.anulom.database.DBManager.TableInfo.TABLE_TASK;public class NextActivity extends AppCompatActivity {    String umail = umailid;    EditText etusermailid = Login.etusermailid;    private final Handler handler = new Handler();    private TabLayout tabLayout;    DBOperation database;    Calendar calendar;    SimpleDateFormat simpleDateFormat;    String Date, ID, val = "";    Context context;    TextView text1;    private static long TIME_OUT_IN_SECONDS = 120;    public static ProgressDialog pDialog;    public static AlertDialog alertDialog;    SearchManager searchManager;    SearchView searchView;    private SharedPreferences usermail;    private SharedPreferences Date1;    private String username2 = "";    private String currentdate = "";    public static NextActivity thisnext = null;    DBOperation db;    Timer singleTask = new Timer();    int startdelay = 7000;    // Tab titles    String valuenext = "0", valuefromback = "";    //search    SearchView sv;    int i = 0, pos;    TextView tabTextView;    BroadcastReceiver receiver1;    CheckBox c1 = null;    CheckBox c3 = null;    CheckBox c4 = null;    CheckBox c5 = null;    CheckBox c6 = null;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.next);        callPhone();        refreshtime();        if (GenericMethods.value.equals("false") && GenericMethods.toastmsg.equals("true")) {            Toast.makeText(getApplicationContext(), "No Records Found", Toast.LENGTH_LONG).show();            GenericMethods.toastmsg = "false";        }        database = new DBOperation(this);        Toolbar toolbar = findViewById(R.id.toolbar);        db = new DBOperation(this);        setSupportActionBar(toolbar);        //getSupportActionBar().setDisplayShowHomeEnabled(true);        getSupportActionBar().setDisplayShowTitleEnabled(false);        getSupportActionBar().setIcon(R.drawable.icon2);        pos = getIntent().getIntExtra("val", pos);        ViewPager viewPager = findViewById(R.id.viewpager);        setupViewPager(viewPager);        valuefromback = getIntent().getStringExtra("value");        text1 = findViewById(R.id.textView1);        tabLayout = findViewById(R.id.tabs);        tabLayout.setupWithViewPager(viewPager);        usermail = PreferenceManager.getDefaultSharedPreferences(this);        username2 = usermail.getString("username", "");        String password2 = usermail.getString("password", "");        for (int i = 0; i < tabLayout.getTabCount(); i++) {            TabLayout.Tab tab = tabLayout.getTabAt(i);            RelativeLayout relativeLayout = (RelativeLayout)                    LayoutInflater.from(NextActivity.this).inflate(R.layout.tab_layout, tabLayout, false);            //noinspection RedundantCast            tabTextView = relativeLayout.findViewById(R.id.tab_title);            tabTextView.setText(tab.getText());            tabTextView.setTextColor(Color.parseColor("#ffffff"));            tab.setCustomView(relativeLayout);            tab.select();        }        tabLayout.addOnTabSelectedListener(new TabLayout.ViewPagerOnTabSelectedListener(viewPager) {            @Override            public void onTabSelected(TabLayout.Tab tab) {                    GenericMethods.tabpos = tabLayout.getSelectedTabPosition();                super.onTabSelected(tab);            }        });        handleIntent(getIntent());        //}        viewPager.setCurrentItem(GenericMethods.tabpos, false);    }    public void refreshtime() {        Date1 = this.getSharedPreferences("MyPref", 0); // 0 - for private mode        currentdate = Date1.getString("Date", "");    }    private void handleIntent(Intent intent) {        if((GenericMethods.value == "false")){            if (Intent.ACTION_SEARCH.equals(intent.getAction())) {                String query = intent.getStringExtra(SearchManager.QUERY);                GenericMethods.value = "insearch";                GenericMethods.rkeyfn = query.toLowerCase();                GenericMethods.rkeyfn.replace("_", "");                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        if (!isFinishing()) {                            pDialog = new ProgressDialog(NextActivity.this);                            pDialog.setMessage("Searching...");                            pDialog.setCancelable(false);                            pDialog.show();                        }                    }                });                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        Toast.makeText(NextActivity.this, "SEARCH STARTED", Toast.LENGTH_SHORT).show();                        if (GenericMethods.tabpos == 0) {                            new manual_search().execute();                        } else if (GenericMethods.tabpos == 1) {                            new manual_search2().execute();                        } else if (GenericMethods.tabpos == 2) {                            new manual_search3().execute();                        }                    }                });            }        }    }    class manual_search extends AsyncTask<String, Integer, Double> {        @Override        protected Double doInBackground(String... params) {            String rkey1 = "", env1 = "";            db = new DBOperation(NextActivity.this);            for (int i = 0; i < db.getAllTodayList(db).size(); i++) {                rkey1 = db.getAllTodayList(db).get(i).get("rkey").replace("_", "").toLowerCase();                System.out.println("Search Started.." + rkey1 + " " + GenericMethods.rkeyfn);                if (rkey1.equals(GenericMethods.rkeyfn) || rkey1.contains(GenericMethods.rkeyfn) || db.getAllTodayList(db).get(i).get("oname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllTodayList(db).get(i).get("tname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllTodayList(db).get(i).get("sdate").replace("-", "").contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + rkey1);                    GenericMethods.todayyy = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllTodayList(db).get(i));                    GenericMethods.getAllTodaylist1.add(getAllListMap);                }                if (i == db.getAllTodayList(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getAllTodaylist1);                }            }            for (int i = 0; i < db.getAllOlderist(db).size(); i++) {                rkey1 = db.getAllOlderist(db).get(i).get("rkey").replace("_", "").toLowerCase();                System.out.println("  Search Started.." + i + rkey1 + " " + GenericMethods.rkeyfn);                if (rkey1.equals(GenericMethods.rkeyfn) || rkey1.contains(GenericMethods.rkeyfn) || db.getAllOlderist(db).get(i).get("oname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllOlderist(db).get(i).get("tname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllOlderist(db).get(i).get("sdate").replace("-", "").contains(GenericMethods.rkeyfn)) {                    System.out.println("   Search data.." + rkey1 + GenericMethods.rkeyfn);                    GenericMethods.olderrr = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllOlderist(db).get(i));                    GenericMethods.getAllOlderlist1.add(getAllListMap);                    System.out.println("    Search result1:" + GenericMethods.getAllOlderlist1 + " " + getAllListMap);                }                if (i == db.getAllOlderist(db).size() - 1) {                    System.out.println("   Older Search result:" + GenericMethods.getAllOlderlist1);                }            }            for (int i = 0; i < db.getAllNewList(db).size(); i++) {                rkey1 = db.getAllNewList(db).get(i).get("rkey").replace("_", "").toLowerCase();                System.out.println("Search Started.." + rkey1 + " " + GenericMethods.rkeyfn);                if (rkey1.equals(GenericMethods.rkeyfn) || rkey1.contains(GenericMethods.rkeyfn) || db.getAllNewList(db).get(i).get("oname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllNewList(db).get(i).get("tname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllNewList(db).get(i).get("sdate").replace("-", "").contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + rkey1);                    GenericMethods.newwww = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllNewList(db).get(i));                    GenericMethods.getAllnewlist1.add(getAllListMap);                }                if (i == db.getAllNewList(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getAllnewlist1);                }            }            for (int i = 0; i < db.getAllList(db).size(); i++) {                rkey1 = db.getAllList(db).get(i).get("rkey").replace("_", "").toLowerCase();                System.out.println("Search Started.." + rkey1 + " " + GenericMethods.rkeyfn);                if (rkey1.equals(GenericMethods.rkeyfn) || rkey1.contains(GenericMethods.rkeyfn) || db.getAllList(db).get(i).get("oname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllList(db).get(i).get("tname").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllList(db).get(i).get("sdate").replace("-", "").contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + rkey1);                    GenericMethods.completeddd = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllList(db).get(i));                    GenericMethods.getAllcompletedlist1.add(getAllListMap);                }                if (i == db.getAllList(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getAllcompletedlist1);                }            }            if (GenericMethods.newwww.equals("true") || GenericMethods.completeddd.equals("true") || GenericMethods.olderrr.equals("true") || GenericMethods.todayyy.equals("true")) {                pDialog.dismiss();                GenericMethods.value = "true";                GenericMethods.tabpos = 0;                Intent i = new Intent(NextActivity.this, SearchActivity.class);                i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                startActivity(i);            } else {                pDialog.dismiss();                no_value();            }            return null;        }        protected void onPostExecute(Double result) {            if (pDialog != null)                pDialog.dismiss();        }    }//    class manual_search1 extends AsyncTask<String, Integer, Double> {//////        @Override//        protected Double doInBackground(String... params) {//////            String env1 = "";//            db = new DBOperation(NextActivity.this);//////            for (int i = 0; i < db.getAllsalesTodayList(db).size(); i++) {////                env1 = db.getAllsalesTodayList(db).get(i).get("env").replace("_", "").toLowerCase();//                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);////                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllsalesTodayList(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllsalesTodayList(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {//                    System.out.println("Search data.." + env1);//                    GenericMethods.salestodayyy = "true";//                    HashMap<String, String> getAllListMap = new HashMap<>();//                    getAllListMap.putAll(db.getAllsalesTodayList(db).get(i));//                    GenericMethods.getAllsalestodaylist1.add(getAllListMap);//////                }//                if (i == db.getAllsalesTodayList(db).size() - 1) {////                    System.out.println("Search result:" + GenericMethods.getAllsalestodaylist1);//                }//            }////            for (int i = 0; i < db.getAllsalesOlderist(db).size(); i++) {////                env1 = db.getAllsalesOlderist(db).get(i).get("env").replace("_", "").toLowerCase();//                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);////                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllsalesOlderist(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllsalesOlderist(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {//                    System.out.println("Search data.." + env1);////                    HashMap<String, String> getAllListMap = new HashMap<>();//                    getAllListMap.putAll(db.getAllsalesOlderist(db).get(i));//                    GenericMethods.getAllsalesolderlist1.add(getAllListMap);//////                }//                if (i == db.getAllsalesOlderist(db).size() - 1) {////                    System.out.println("Search result:" + GenericMethods.getAllsalesolderlist1);//                }//            }//////            for (int i = 0; i < db.getAllsalesnewist(db).size(); i++) {////                env1 = db.getAllsalesnewist(db).get(i).get("env").replace("_", "").toLowerCase();//                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);////                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllsalesnewist(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllsalesnewist(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {//                    System.out.println("Search data.." + env1);//                    GenericMethods.salesnewwww = "true";//                    HashMap<String, String> getAllListMap = new HashMap<>();//                    getAllListMap.putAll(db.getAllsalesnewist(db).get(i));//                    GenericMethods.getAllsalesnewlist1.add(getAllListMap);//////                }//                if (i == db.getAllsalesnewist(db).size() - 1) {////                    System.out.println("Search result:" + GenericMethods.getAllsalesnewlist1);//                }//            }////            for (int i = 0; i < db.getAllsaleslist(db).size(); i++) {////                env1 = db.getAllsaleslist(db).get(i).get("env").replace("_", "").toLowerCase();//                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);////                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllsaleslist(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllsaleslist(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {//                    System.out.println("Search data.." + env1);//                    GenericMethods.salescompleteddd = "true";//                    HashMap<String, String> getAllListMap = new HashMap<>();//                    getAllListMap.putAll(db.getAllsaleslist(db).get(i));//                    GenericMethods.getAllsalescompletedlist1.add(getAllListMap);//////                }//                if (i == db.getAllsaleslist(db).size() - 1) {////                    System.out.println("Search result:" + GenericMethods.getAllsalescompletedlist1);//                }//            }////            if ((GenericMethods.salesnewwww.equals("true") || GenericMethods.salescompleteddd.equals("true") || GenericMethods.salesolderrr.equals("true") || GenericMethods.salestodayyy.equals("true"))) {////                pDialog.dismiss();//                GenericMethods.tabpos = 1;//                GenericMethods.value = "true";//                System.out.println("salescompletes from nextactivity"+GenericMethods.salescompleteddd);//                Intent i = new Intent(NextActivity.this, SearchActivity.class);//                i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                startActivity(i);////            } else {//////                pDialog.dismiss();//                no_value();//            }//////            return null;//        }//////        protected void onPostExecute(Double result) {////            if (pDialog != null)//                pDialog.dismiss();//////        }//    }    class manual_search2 extends AsyncTask<String, Integer, Double> {        @Override        protected Double doInBackground(String... params) {            String env1 = "";            db = new DBOperation(NextActivity.this);            for (int i = 0; i < db.getAllmarriageTodayList(db).size(); i++) {                env1 = db.getAllmarriageTodayList(db).get(i).get("env").replace("_", "").toLowerCase();                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllmarriageTodayList(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllmarriageTodayList(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + env1);                    GenericMethods.marriagetodayyy = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllmarriageTodayList(db).get(i));                    GenericMethods.getAllmarriagetodaylist1.add(getAllListMap);                }                if (i == db.getAllmarriageTodayList(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getAllmarriagetodaylist1);                }            }            //older list operation            for (int i = 0; i < db.getAllmarriageOlderList(db).size(); i++) {                env1 = db.getAllmarriageOlderList(db).get(i).get("env").replace("_", "").toLowerCase();                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllmarriageOlderList(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllmarriageOlderList(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + env1);                    GenericMethods.marriageolderrr = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllmarriageOlderList(db).get(i));                    GenericMethods.getAllmarriageolderlist1.add(getAllListMap);                }                if (i == db.getAllmarriageOlderList(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getAllmarriageolderlist1);                }            }            // new list operation            for (int i = 0; i < db.getAllmarriagenewList(db).size(); i++) {                env1 = db.getAllmarriagenewList(db).get(i).get("env").replace("_", "").toLowerCase();                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllmarriagenewList(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllmarriagenewList(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + env1);                    GenericMethods.marriagenewwww = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllmarriagenewList(db).get(i));                    GenericMethods.getAllmarriagenewlist1.add(getAllListMap);                }                if (i == db.getAllmarriagenewList(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getAllmarriagenewlist1);                }            }            //new list operation            for (int i = 0; i < db.getAllmarriageAllList(db).size(); i++) {                env1 = db.getAllmarriageAllList(db).get(i).get("env").replace("_", "").toLowerCase();                System.out.println("Search Started.." + env1 + " " + GenericMethods.rkeyfn);                if (env1.equals(GenericMethods.rkeyfn) || env1.contains(GenericMethods.rkeyfn) || db.getAllmarriageAllList(db).get(i).get("startdate").toLowerCase().contains(GenericMethods.rkeyfn) || db.getAllmarriageAllList(db).get(i).get("contact_person").toLowerCase().contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + env1);                    GenericMethods.marriagecompleteddd = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getAllmarriageAllList(db).get(i));                    GenericMethods.getAllmarriagecompletedlist1.add(getAllListMap);                }                if (i == db.getAllmarriageAllList(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getAllmarriagecompletedlist1);                }            }            if (GenericMethods.marriagetodayyy.equals("true") || GenericMethods.marriageolderrr.equals("true") || GenericMethods.marriagecompleteddd.equals("true") || GenericMethods.marriagenewwww.equals("true")) {                pDialog.dismiss();                GenericMethods.value = "true";                GenericMethods.tabpos = 1;                Intent i = new Intent(NextActivity.this, SearchActivity.class);                i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                startActivity(i);            } else {//                pDialog.dismiss();                no_value();            }            return null;        }        protected void onPostExecute(Double result) {            if (pDialog != null)                pDialog.dismiss();        }    }    class manual_search3 extends AsyncTask<String, Integer, Double> {        @Override        protected Double doInBackground(String... params) {            String docid1 = "";            db = new DBOperation(NextActivity.this);            //today list operation            for (int i = 0; i < db.getadhocdetails(db).size(); i++) {                docid1 = db.getadhocdetails(db).get(i).get("document_id").replace("_", "").toLowerCase();                System.out.println("Search Started.." + docid1 + " " + GenericMethods.rkeyfn);                if (docid1.equals(GenericMethods.rkeyfn) || docid1.contains(GenericMethods.rkeyfn) || db.getadhocdetails(db).get(i).get("created_at").substring(0, 10).toLowerCase().contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + docid1);                    GenericMethods.taskadhoc = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getadhocdetails(db).get(i));                    GenericMethods.getadhocdetails1.add(getAllListMap);                }                if (i == db.getadhocdetails(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getadhocdetails1);                }            }            //older list operation            for (int i = 0; i < db.getComplaintdetails(db).size(); i++) {                docid1 = db.getComplaintdetails(db).get(i).get("document_id").replace("_", "").toLowerCase();                System.out.println("Search Started.." + docid1 + " " + GenericMethods.rkeyfn);                if (docid1.equals(GenericMethods.rkeyfn) || docid1.contains(GenericMethods.rkeyfn) || db.getComplaintdetails(db).get(i).get("created_at").substring(0, 10).toLowerCase().contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + docid1);                    GenericMethods.taskcomplaint = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getComplaintdetails(db).get(i));                    GenericMethods.getcomplaintdetails1.add(getAllListMap);                }                if (i == db.getComplaintdetails(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getcomplaintdetails1);                }            }            // completed list operation            for (int i = 0; i < db.getWitnessdetails(db).size(); i++) {                docid1 = db.getWitnessdetails(db).get(i).get("document_id").replace("_", "").toLowerCase();                System.out.println("Search Started.." + docid1 + " " + GenericMethods.rkeyfn);                if (docid1.equals(GenericMethods.rkeyfn) || docid1.contains(GenericMethods.rkeyfn) || db.getWitnessdetails(db).get(i).get("created_at").substring(0, 10).toLowerCase().contains(GenericMethods.rkeyfn)) {                    System.out.println("Search data.." + docid1);                    GenericMethods.taskwitness = "true";                    HashMap<String, String> getAllListMap = new HashMap<>();                    getAllListMap.putAll(db.getWitnessdetails(db).get(i));                    GenericMethods.getwitnessdetails1.add(getAllListMap);                }                if (i == db.getWitnessdetails(db).size() - 1) {                    System.out.println("Search result:" + GenericMethods.getwitnessdetails1);                }            }            if (GenericMethods.taskadhoc.equals("true") || GenericMethods.taskcomplaint.equals("true") || GenericMethods.taskwitness.equals("true")) {                pDialog.dismiss();                GenericMethods.tabpos = 2;                GenericMethods.value = "true";                Intent i = new Intent(NextActivity.this, SearchActivity.class);                i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                startActivity(i);            } else {                pDialog.dismiss();                no_value();            }            return null;        }        protected void onPostExecute(Double result) {            if (pDialog != null)                pDialog.dismiss();        }    }    void no_value() {        new manual_search().cancel(true);        new manual_search2().cancel(true);        new manual_search3().cancel(true);        GenericMethods.value = "false";        GenericMethods.toastmsg = "true";        GenericMethods.pendingworks = "false";        GenericMethods.nextactivity = "true";        Intent i = new Intent(NextActivity.this, NextActivity.class);        startActivity(i);    }    private void setupViewPager(ViewPager viewPager) {        db = new DBOperation(this);        ViewPagerAdapter adapter = new ViewPagerAdapter(this.getSupportFragmentManager());        if (GenericMethods.nextactivity == "true") {            adapter.addFragment(new biometricfragment(), "Biometric");            adapter.addFragment(new marriagefragment(), "Marriage");            adapter.addFragment(new taskfragment(), "Tasks");        }else if (GenericMethods.nextactivity == "false") {            adapter.addFragment(new pendingfragment(), "Pending Tasks");        }        viewPager.setAdapter(adapter);    }    class ViewPagerAdapter extends FragmentPagerAdapter {        private final List<Fragment> mFragmentList = new ArrayList<>();        private final List<String> mFragmentTitleList = new ArrayList<>();        public ViewPagerAdapter(FragmentManager manager) {            super(manager);        }        @Override        public Fragment getItem(int position) {            return mFragmentList.get(position);        }        @Override        public int getCount() {            return mFragmentList.size();        }        public void addFragment(Fragment fragment, String title) {            mFragmentList.add(fragment);            mFragmentTitleList.add(title);        }        @Override        public CharSequence getPageTitle(int position) {            return mFragmentTitleList.get(position);        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // TODO Auto-generated method stub        handleIntent(getIntent());        MenuInflater menuInflater = getMenuInflater();        menuInflater.inflate(R.menu.main, menu);        //search function        searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);        searchView = (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.search));        searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));        menu.findItem(R.id.login_id).setTitle(username2);        menu.findItem(R.id.weekend).setTitle(currentdate);        return super.onCreateOptionsMenu(menu);    }    public boolean onOptionsItemSelected(MenuItem item) {        // TODO Auto-generated method stub        super.onOptionsItemSelected(item);        switch (item.getItemId()) {            case R.id.action_refresh:      if(GenericMethods.currentversion.equals(GenericMethods.apiversion)) {    if (GenericMethods.isConnected(getApplicationContext())) {            if (GenericMethods.ServerDown()) {                trimCache(this);                GenericMethods.splashscreen = "next";                GenericMethods.tabpos = tabLayout.getSelectedTabPosition();                calendar = Calendar.getInstance();                simpleDateFormat = new SimpleDateFormat("MMM dd, hh:mm a");                Date = simpleDateFormat.format(calendar.getTime());                SharedPreferences pref = (this.getSharedPreferences("MyPref", 0)); // 0 - for private mode                final SharedPreferences.Editor editor1 = pref.edit();                editor1.putString("Date", Date);                editor1.apply();                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        final LayoutInflater inflater = LayoutInflater.from(NextActivity.this);                        final View popupView = inflater.inflate(R.layout.popup_layout_refresh, null, false);                        final PopupWindow popupWindow = new PopupWindow(popupView, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);                        //popupWindow.showAtLocation(popupView, Gravity.TOP,  RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);                        c1 = popupView.findViewById(R.id.checkBox);                        c3 = popupView.findViewById(R.id.checkBox2);                        c5 = popupView.findViewById(R.id.checkBox4);                        c6 = popupView.findViewById(R.id.checkBox5);                        Button b1 = popupView.findViewById(R.id.button7);                        Button b2 = popupView.findViewById(R.id.button8);//                        c1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                            @Override                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                                if (c1.isChecked()) {                                    c1.setChecked(true);                                } else {                                    c1.setChecked(false);                                }                            }                        });                        c3.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                            @Override                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                                if (c3.isChecked()) {                                    c3.setChecked(true);                                } else {                                    c3.setChecked(false);                                }                            }                        });                        c5.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                            @Override                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                                if (c5.isChecked()) {                                    c5.setChecked(true);                                } else {                                    c5.setChecked(false);                                }                            }                        });                        c6.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                            @Override                            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                                if (c6.isChecked()) {                                    c6.setChecked(true);                                } else {                                    c6.setChecked(false);                                }                            }                        });                        b1.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                boolean clicked = true;                                if (clicked) {                                    if (c1.isChecked() || c3.isChecked()  || c5.isChecked() || c6.isChecked()) {                                        System.out.println("hiii");                                        pDialog = new ProgressDialog(NextActivity.this);                                        pDialog.setMessage("Syncing Offline data if any and then Refreshing...");                                        pDialog.setIndeterminate(false);                                        pDialog.setCancelable(false);                                        pDialog.show();                                    } else {                                        popupWindow.dismiss();                                    }                                    if (c1.isChecked()) {                                        PendingWitnessRefresh();                                    }                                     if(c3.isChecked()){                                        BiometricSyncnRefresh();                                    }                                    if (c5.isChecked()) {                                        MarriageSyncandRefresh();                                    }                                    if (c6.isChecked()) {                                        TasksSyncandRefresh();                                    }                                    popupWindow.dismiss();                                }                            }                        });                        b2.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                popupWindow.dismiss();                            }                        });                        popupWindow.setFocusable(true);                        popupWindow.setBackgroundDrawable(new ColorDrawable());                        int location[] = new int[2];                        popupView.getLocationOnScreen(location);                        popupWindow.showAtLocation(popupView, Gravity.CENTER_VERTICAL, 0, 0);                    }                });            } else {                Toast.makeText(this, "Not Able to Connect One platform,Please contact RnD team", Toast.LENGTH_LONG).show();            }    } else {        Toast.makeText(getApplicationContext(), "Please Turn on Internet!!!.", Toast.LENGTH_LONG).show();    }}else{    runOnUiThread(new Runnable() {        @Override        public void run() {            Intent i=new Intent(NextActivity.this, MyDialog.class);            startActivity(i);        }    });}                    return true;                    case R.id.abt:                        Intent i3 = new Intent(getApplicationContext(), AppointmentActivity.class);                        startActivity(i3);                        return true;                    case R.id.faq:                        Intent i5 = new Intent(getApplicationContext(), informationtab.class);                        startActivity(i5);                        return true;                    case R.id.pending:                        if (GenericMethods.pendingdisplay == "true") {                            GenericMethods.nextactivity = "false";                            GenericMethods.pendingworks = "true";                            Intent i4 = new Intent(getApplicationContext(), NextActivity.class);                            startActivity(i4);                        } else {                            Intent i = new Intent(getApplicationContext(), nodetails.class);                            startActivity(i);                        }                        return true;//            case R.id.penalty://                Intent i33 = new Intent(getApplicationContext(), Penalty.class);//                startActivity(i33);//                return  true;                    case R.id.weekend:                        Date1 = this.getSharedPreferences("MyPref", 0); // 0 - for private mode                        String currentdate = Date1.getString("Date", "");                        return true;                    case R.id.log_out:                        if (GenericMethods.isConnected(getApplicationContext())) {                            usermail = PreferenceManager.getDefaultSharedPreferences(this);                            SharedPreferences.Editor editor = usermail.edit();                            editor.remove("username");                            editor.remove("password");                            editor.apply();                            db.delLocationDetails(db);                            db.delAppointment(db);                            db.deluser(db);                            db.delDocument(db);                            db.delComments(db);                            db.delUserRole(db);                            SQLiteDatabase base1 = db.getWritableDatabase();                            base1.delete(ATTENDEES, null, null);                            SQLiteDatabase basestatus = db.getWritableDatabase();                            basestatus.delete(ATT_STATUS, null, null);                            SQLiteDatabase base3 = db.getWritableDatabase();                            base3.delete(DBManager.TableInfo.PARTIES, null, null);                            SQLiteDatabase base = db.getWritableDatabase();                            base.delete(PAYMENT, null, null);                            SQLiteDatabase marriageattendees = db.getWritableDatabase();                            marriageattendees.delete(TABLE_MARRIAGE_ATTENDEES, null, null);                            SQLiteDatabase marriageappoint = db.getWritableDatabase();                            marriageappoint.delete(TABLE_MARRIAGE_APPOINTMENT, null, null);                            SQLiteDatabase marriagedocu = db.getWritableDatabase();                            marriagedocu.delete(TABLE_MARRIAGE, null, null);                            SQLiteDatabase baset = db.getWritableDatabase();                            baset.delete(TABLE_TASK, null, null);                            SQLiteDatabase basep = db.getWritableDatabase();                            basep.delete(DBManager.TableInfo.TABLE_PENDINGWITNESS, null, null);                            GenericMethods.todaybiometric = 0;                            GenericMethods.olderbiometric = 0;                            GenericMethods.newbiometric = 0;                            GenericMethods.completedbiometric = 0;                            GenericMethods.email = "";                            Intent i = new Intent(getApplicationContext(), Login.class);                            i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);                            startActivity(i);                        } else {                            Toast.makeText(NextActivity.this, "Please Turn On Internet to Logout!!", Toast.LENGTH_LONG).show();                        }                }        return super.onOptionsItemSelected(item);    }    public void BiometricSyncnRefresh() {            GenericMethods.toastmsg1 = "Biometric";            db = new DBOperation(NextActivity.this);            ArrayList<HashMap<String, String>> listofcommment = db.getcomment(db);            ArrayList<HashMap<String, String>> acvrreportlist = db.getAcvrReport(db);            ArrayList<HashMap<String, String>> statusreportlist = db.getSyncStatusReport(db);            boolean flag = false;            if (listofcommment.size() > 0) {                Intent intent = new Intent(NextActivity.this, SendCommentService.class);                startService(intent);                flag = true;            }            if (acvrreportlist.size() > 0) {                Intent intent = new Intent(NextActivity.this, SendReportService.class);                startService(intent);                flag = true;            }            if (statusreportlist.size() > 0) {                Intent intent = new Intent(NextActivity.this, StatusReportService.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> paymentlist = db.getPaymentReport(db);            if (paymentlist.size() > 0) {                Intent intent = new Intent(NextActivity.this, SendPaymentService.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> partieslist = db.getPartypost(db);            if (partieslist.size() > 0) {                Intent intent = new Intent(NextActivity.this, SendmultiPartyReport.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> appointmentlist = db.postappointment(db);            if (appointmentlist.size() > 0) {                Intent intent = new Intent(NextActivity.this, postappointmentbooking.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> calllist = db.calldetails(db);            if (calllist.size() > 0) {                Intent intent = new Intent(NextActivity.this, call.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> reschedulelist = db.getrescheduledetails(db);            if (reschedulelist.size() > 0) {                Intent intent = new Intent(NextActivity.this, rescheduledetails.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> fetchactualtimelist = db.getactualtime(db);            if (fetchactualtimelist.size() > 0) {                Intent intent = new Intent(NextActivity.this, fetchactualtime.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> appointmentstatuspost = db.getmultipartycheck(db);            if (appointmentstatuspost.size() > 0) {                Intent intent = new Intent(NextActivity.this, AppointmentstatusPost.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> internalwitness = db.getinternalexternalpost(db);            if (internalwitness.size() > 0) {                Intent intent = new Intent(NextActivity.this, InternalExternalWitness.class);                startService(intent);                flag = true;            }            db.delLocationDetails(db);            db.delAppointment(db);            db.deluser(db);            db.delDocument(db);            db.delComments(db);            db.delUserRole(db);            SQLiteDatabase base1 = db.getWritableDatabase();            base1.delete(ATTENDEES, null, null);            SQLiteDatabase basestatus = db.getWritableDatabase();            basestatus.delete(ATT_STATUS, null, null);            SQLiteDatabase base3 = db.getWritableDatabase();            base3.delete(DBManager.TableInfo.PARTIES, null, null);            SQLiteDatabase base = db.getWritableDatabase();            base.delete(PAYMENT, null, null);            Intent service = new Intent(getApplicationContext(), Biometricdatalist.class);            startService(service);            Intent service1 = new Intent(getApplicationContext(), GetCommentService.class);            startService(service1);            //  popupWindow.dismiss();    }    public void MarriageSyncandRefresh() {            boolean flag = false;            GenericMethods.toastmsg1 = "Marriage";            ArrayList<HashMap<String, String>> marriagecomm = db.getmarriagecomment(db);            if (marriagecomm.size() > 0) {                Intent intent = new Intent(NextActivity.this, Marriagecommentservice.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> appointmentstatuspost = db.getmultipartycheck(db);            if (appointmentstatuspost.size() > 0) {                Intent intent = new Intent(NextActivity.this, AppointmentstatusPost.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> marriageacvr = db.getmarriageAcvrReport(db);            if (marriageacvr.size() > 0) {                Intent intent = new Intent(NextActivity.this, Marriageacvrservice.class);                startService(intent);                flag = true;            }            SQLiteDatabase marriageattendees = db.getWritableDatabase();            marriageattendees.delete(TABLE_MARRIAGE_ATTENDEES, null, null);            SQLiteDatabase marriageappoint = db.getWritableDatabase();            marriageappoint.delete(TABLE_MARRIAGE_APPOINTMENT, null, null);            SQLiteDatabase marriagedocu = db.getWritableDatabase();            marriagedocu.delete(TABLE_MARRIAGE, null, null);            Intent service = new Intent(getApplicationContext(), Marriagedatalist.class);            startService(service);            // popupWindow.dismiss();    }    public static void trimCache(Context context) {        try {            File dir = context.getCacheDir();            deleteDir(dir);        } catch (Exception e) {            e.printStackTrace();        }    }    public static boolean deleteDir(File dir) {        if (dir != null && dir.isDirectory()) {            String[] children = dir.list();            for (String aChildren : children) {                boolean success = deleteDir(new File(dir, aChildren));                if (!success) {                    return false;                }            }            return dir.delete();        } else {            return false;        }    }    public void TasksSyncandRefresh() {            boolean flag = false;            GenericMethods.toastmsg1 = "Task";            ArrayList<HashMap<String, String>> posttasklist = db.getposttaskdetails(db);            if (posttasklist.size() > 0) {                Intent intent = new Intent(NextActivity.this, Posttask.class);                startService(intent);                flag = true;            }            ArrayList<HashMap<String, String>> reassignlist = db.getreassign(db);            if (reassignlist.size() > 0) {                Intent intent = new Intent(NextActivity.this, reassignpost.class);                startService(intent);                flag = true;            }            SQLiteDatabase base1 = db.getWritableDatabase();            base1.delete(TABLE_TASK, null, null);            Intent service = new Intent(getApplicationContext(), Taskdatalist.class);            startService(service);            // popupWindow.dismiss();    }    public void PendingWitnessRefresh() {            boolean flag = false;            GenericMethods.toastmsg1 = "Pending Witness";            ArrayList<HashMap<String, String>> partieslist = db.getPartypost(db);            if (partieslist.size() > 0) {                Intent intent = new Intent(NextActivity.this, SendmultiPartyReport.class);                startService(intent);                flag = true;            }            SQLiteDatabase base1 = db.getWritableDatabase();            base1.delete(DBManager.TableInfo.TABLE_PENDINGWITNESS, null, null);            Intent service = new Intent(getApplicationContext(), pendingwitnesslist.class);            startService(service);    }    public void closeProgressBar() {        refreshtime();        pDialog.cancel();    }    public boolean onKeyDown(int keyCode, KeyEvent event) {        if (keyCode == KeyEvent.KEYCODE_BACK) {            exitByBackKey();            return true;        }        return super.onKeyDown(keyCode, event);    }    protected void exitByBackKey() {        Intent startMain = new Intent(Intent.ACTION_MAIN);        startMain.addCategory(Intent.CATEGORY_HOME);        startMain.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        startActivity(startMain);    }    @Override    public void onDestroy() {        super.onDestroy();        if (singleTask != null) {            singleTask.cancel();        }    }    @Override    protected void onPostResume() {        super.onPostResume();        GenericMethods.pd_value = "true";    }    @Override    protected void onPause() {        super.onPause();        unregisterReceiver(receiver1);        if (pDialog != null)            pDialog.dismiss();        thisnext = null;        GenericMethods.pd_value = "null";    }    @Override    protected void onResume() {        super.onResume();        IntentFilter filter = new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE");        receiver1 = new NetworkChangeReceiver();        registerReceiver(receiver1, filter);    }    public void callPhone() {        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CALL_PHONE}, 123);        } else if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_GRANTED) {        }    }}